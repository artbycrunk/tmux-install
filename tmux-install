#! /usr/bin/env python3

import argparse
import os
import platform
import subprocess
import sys

SCRIPT_LOCATION = "./tmux-install.sh"
VERSIONS = {
    "2.7_CentOS_7.4.1708": {"NCURSES_VERSION": "6.0", "LIBEVENT_VERSION": "2.0.22"},
    "2.9a_Ubuntu_18.04": {"NCURSES_VERSION": "6.1", "LIBEVENT_VERSION": "2.1.8"},
    "2.9a_Darwin_10.14": {"NCURSES_VERSION": "6.1", "LIBEVENT_VERSION": "2.1.8", "TMUX_STATIC": ""},
    "3.0-rc5_Ubuntu_18.04": {"NCURSES_VERSION": "6.1", "LIBEVENT_VERSION": "2.1.11"},
    "3.0-rc5_Darwin_10.14": {"NCURSES_VERSION": "6.1", "LIBEVENT_VERSION": "2.1.11", "TMUX_STATIC": ""},
    "3.0_Ubuntu_18.04": {"NCURSES_VERSION": "6.1", "LIBEVENT_VERSION": "2.1.11"},
    "3.0a_Ubuntu_18.04": {"NCURSES_VERSION": "6.1", "LIBEVENT_VERSION": "2.1.11"},

}


def log(msg):
    print(msg)


def get_available_versions():
    distribution = get_distribution()
    versions = list()
    for version in VERSIONS:
        curr_ver = version.split("_", maxsplit=1)
        if not distribution in curr_ver[1]:
            continue
        if not curr_ver[0] in versions:
            versions.append(curr_ver[0])
    return versions


def get_default_install_dir():
    return "%s/tmux-static" % os.environ["HOME"]


def get_distribution():
    system = platform.system().lower()
    if system == "linux":
        return "_".join([x.split()[0] for x in platform.linux_distribution()[:-1]])
    if system == "darwin":
        version = '.'.join(platform.mac_ver()[0].split(".")[0:2])
        return "Darwin_%s" % version
    

def parser_help(arg_parser, msg=None):
    if msg:
        log(msg)
    arg_parser.print_help()
    sys.exit(1)


def parser():
    try:
        arg_parser = argparse.ArgumentParser()
        arg_parser.add_argument(
            "--version",
            action="store",
            help="Set the tmux version to install. Default: latest",
            choices=get_available_versions(),
        )
        arg_parser.add_argument(
            "--install-dir",
            action="store",
            help="Set the install dir. Default: %s" % get_default_install_dir(),
        )
        args = arg_parser.parse_args()
        if not args.version:
            parser_help(arg_parser, msg="Specify a tmux version!")
    except Exception as e:
        parser_help(arg_parser, msg=str(e))
    return args


def set_versions(tmux_version):
    distribution = get_distribution()

    log("Checking dependancy for current distribution : %s" % distribution)
    versions = VERSIONS.get("%s_%s" % (tmux_version, distribution), {})
    if not versions:
        return False

    os.environ["TMUX_VERSION"] = tmux_version
    for env_var in ["NCURSES_VERSION", "LIBEVENT_VERSION", "TMUX_STATIC"]:
        if versions.get(env_var, None):
            os.environ[env_var] = versions.get(env_var)
    return True


def set_install_dir(install_dir):
    if not install_dir:
        install_dir = get_default_install_dir()
    os.environ["TMUX_INSTALL_DIR"] = install_dir


def run_script():
    process = subprocess.Popen(SCRIPT_LOCATION, stdout=subprocess.PIPE)
    for line in process.stdout:
        log(line.decode("utf-8"))
    process.wait()


def main():
    args = parser()
    if not set_versions(args.version):
        log(" Your distribution has no valid versions set!")
        sys.exit(1)
    set_install_dir(args.install_dir)
    run_script()
    


main()
